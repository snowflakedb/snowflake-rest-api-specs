openapi: 3.0.0
servers:
  - description: Snowflake Task API
    url: https://org-account.snowflakecomputing.com
info:
  version: 0.0.1
  title: Snowflake Task API
  description: >-
    The Snowflake Task API is a REST API that you can use to access, update, and perform certain actions on task resources in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/tasks:
    get:
      summary: List tasks
      tags:
        - task
      description: Lists tasks under the database and schema, with show options as query parameters.
      operationId: listTasks
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/rootOnly'
        - $ref: 'common.yaml#/components/parameters/like'
        - $ref: 'common.yaml#/components/parameters/startsWith'
        - $ref: 'common.yaml#/components/parameters/showLimit'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    post:

      summary: Create a task
      tags:
        - task
      description: Create a task, with standard create modifiers
        as query parameters. See the Task component definition
        for what is required to be provided in the request body.
      operationId: createTask
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/createMode'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '409':
          $ref: 'common.yaml#/components/responses/409Conflict'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:
    get:
      summary: Fetch a task
      tags:
        - task
      description: Fetch a task using the describe command output.
      operationId: fetchTask
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    put:
      summary: Create a (or alter an existing) task
      tags:
        - task
      description: Create a (or alter an existing) task. Even if the operation
        is just an alter, the full property set must be provided.
      operationId: createOrAlterTask
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
    delete:
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - $ref: 'common.yaml#/components/parameters/ifExists'
      summary: Delete a task
      tags:
        - task
      description: Delete a task with the task name. If ifExists is used, the operation will
        succeed even if the object does not exist. Otherwise, there will be a failure
        if the drop is unsuccessful.
      operationId: deleteTask
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:execute:
    post:
      summary: Execute a task object.
      tags:
        - task
      description: Execute a task -- this is equivalent to EXECUTE IMMEDIATE.
      operationId: executeTask
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - name: retryLast
          in: query
          description: Retry the last failed run of the DAG.
          schema:
            type: boolean
            default: false
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:resume:
    post:
      summary: Resume a suspended task.
      tags:
        - task
      description: Resumes a suspended task object. This is equivalento an ALTER TASK ... RESUME.
      operationId: resumeTask
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}:suspend:
    post:
      summary: Suspends a running task.
      tags:
        - task
      description: Suspends a running task. This is equivalent to an ALTER TASK ... SUSPEND.
      operationId: suspendTask
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          $ref: 'common.yaml#/components/responses/200SuccessResponse'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/dependents:
    get:
      summary: Fetch the dependent tasks of a task
      tags:
        - task
      description: This operation returns a list of the dependent tasks of the task with identifier {name}.
      operationId: fetchTaskDependents
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/current_graphs:
    get:
      summary: Get the graph runs that are executing or scheduled for the task for the next 8 days.
      tags:
        - task
      description: This function returns details for graph runs that are currently executing or are next scheduled to run within the next 8 days.
      operationId: getCurrentGraphs
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - in: query
          name: resultLimit
          schema:
            type: integer
            description: Number of results to return, at most. Default is 1000, valid range is 1 to 10000.
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRun'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
  /api/v2/databases/{database}/schemas/{schema}/tasks/{name}/complete_graphs:
    get:
      summary: Get the graph runs that are completed for the task.
      tags:
        - task
      description: This function returns details for graph runs that are completed.
      operationId: getCompleteGraphs
      parameters:
        - $ref: 'common.yaml#/components/parameters/database'
        - $ref: 'common.yaml#/components/parameters/schema'
        - $ref: 'common.yaml#/components/parameters/name'
        - in: query
          name: resultLimit
          schema:
            type: integer
          description: Number of results to return, at most. Default is 1000, valid range is 1 to 10000.
        - in: query
          name: errorOnly
          schema:
            type: boolean
          description: Whether to only return results for tasks runs that have failed. Default is false.
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskRun'
        '400':
          $ref: 'common.yaml#/components/responses/400BadRequest'
        '401':
          $ref: 'common.yaml#/components/responses/401Unauthorized'
        '403':
          $ref: 'common.yaml#/components/responses/403Forbidden'
        '404':
          $ref: 'common.yaml#/components/responses/404NotFound'
        '405':
          $ref: 'common.yaml#/components/responses/405MethodNotAllowed'
        '429':
          $ref: 'common.yaml#/components/responses/429LimitExceeded'
        '500':
          $ref: 'common.yaml#/components/responses/500InternalServerError'
        '503':
          $ref: 'common.yaml#/components/responses/503ServiceUnavailable'
        '504':
          $ref: 'common.yaml#/components/responses/504GatewayTimeout'
components:
  schemas:
    TaskRun:
      type: object
      properties:
        root_task_name:
          type: string
          readOnly: true
        database_name:
          type: string
          readOnly: true
        schema_name:
          type: string
          readOnly: true
        state:
          type: string
          enum: [SCHEDULED, EXECUTING, SUCCEEDED, FAILED, CANCELLED]
          readOnly: true
        first_error_task_name:
          type: string
          readOnly: true
        first_error_code:
          type: integer
          readOnly: true
        first_error_message:
          type: string
          readOnly: true
        scheduled_time:
          type: string
          format: date-time
          readOnly: true
        query_start_time:
          type: string
          format: date-time
          readOnly: true
        next_scheduled_time:
          type: string
          format: date-time
          readOnly: true
        completed_time:
          type: string
          format: date-time
          readOnly: true
        root_task_id:
          type: string
          readOnly: true
        graph_version:
          type: integer
          readOnly: true
        run_id:
          type: integer
          readOnly: true
      example:
        root_task_name: root_task
        database_name: test_db
        schema_name: test_schema
        state: SCHEDULED
        first_error_task_name: test_task
        first_error_code: 0
        first_error_message: ERROR
        scheduled_time: "YYYY-MM-DDTHH24:MI:SS.FF6"
        query_start_time: "YYYY-MM-DDTHH24:MI:SS.FF6"
        next_scheduled_time: "YYYY-MM-DDTHH24:MI:SS.FF6"
        completed_time: "YYYY-MM-DDTHH24:MI:SS.FF6"
        root_task_id: 0
        graph_version: 0
        run_id: 0
      required:
        - root_task_name
        - database_name
        - schema_name
        - state
        - scheduled_time
        - next_scheduled_time
        - root_task_id
        - graph_version
        - run_id
    Task:
      type: object
      properties:
        name:
          $ref: './common.yaml#/components/schemas/Identifier'
        warehouse:
          $ref: './common.yaml#/components/schemas/Identifier'
        schedule:
          oneOf:
            - $ref: '#/components/schemas/MinutesSchedule'
            - $ref: '#/components/schemas/CronSchedule'
          discriminator:
            propertyName: schedule_type
            mapping:
              CRON_TYPE: '#/components/schemas/CronSchedule'
              MINUTES_TYPE: '#/components/schemas/MinutesSchedule'
        comment:
          type: string
        config:
          type: object
          additionalProperties: true
          description: Task Config
        definition:
          type: string
        predecessors:
          type: array
          items:
            type: string
        user_task_managed_initial_warehouse_size:
          type: string
        user_task_timeout_ms:
          type: integer
        suspend_task_after_num_failures:
          type: integer
        condition:
          type: string
        allow_overlapping_execution:
          type: boolean
        error_integration:
          type: string
        created_on:
          type: string
          format: date-time
          readOnly: true
        id:
          type: string
          readOnly: true
        owner:
          type: string
          readOnly: true
        owner_role_type:
          type: string
          readOnly: true
        state:
          type: string
          readOnly: true
          enum: [started, suspended]
        last_committed_on:
          type: string
          readOnly: true
          format: date-time
        last_suspended_on:
          type: string
          readOnly: true
          format: date-time
        database_name:
          type: string
          readOnly: true
        schema_name:
          type: string
          readOnly: true
      example:
        name: task_name
        warehouse: test_wh
        schedule:
          schedule_type: MINUTES_TYPE
          minutes: 10
        comment: test_comment
        config: '$${"output_dir": "/temp/test_directory/", "learning_rate": 0.1}$$'
        definition: this task does...
        predecessors: [ task1, task2, task3 ]
        user_task_managed_initial_warehouse_size: XSMALL
        user_task_timeout_ms: 10
        suspend_task_after_num_failures: 3
        condition: select 1
        allow_overlapping_execution: false
        error_integration: my_notification_int
        created_on: "YYYY-MM-DDTHH:MI:SS.FF6"
        id: task_id
        owner: TASK_ADMIN
        owner_role_type: ADMIN
        state: started
        last_committed_on: "YYYY-MM-DDTHH:MI:SS.FF6"
        last_suspended_on: "YYYY-MM-DDTHH:MI:SS.FF6"
        database_name: TESTDB
        schema_name: TESTSCHEMA
      required:
        - name
        - definition
    CronSchedule:
      type: object
      properties:
        cron_expr:
          type: string
        timezone:
          type: string
      example:
        cron_expr: "* * * * ? *"
        timezone: america/los_angeles
      required:
        - cron_expr
        - timezone
    MinutesSchedule:
      type: object
      properties:
        minutes:
          type: integer
      example:
        minutes: 10
      required:
        - minutes
externalDocs:
  description: Streams and Tasks Reference
  url: https://docs.snowflake.com/en/sql-reference/commands-stream
tags:
  - name: task
