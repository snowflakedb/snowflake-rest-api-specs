openapi: 3.0.0
servers:
- description: Snowflake REST Server
  url: https://org-account.snowflakecomputing.com
info:
  version: 0.0.1
  title: Snowflake Iceberg Table API
  description: The Snowflake Iceberg Table API is a REST API that you can use to access,
    update, and perform certain actions on Iceberg Table resource in a Snowflake database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:
    get:
      summary: List iceberg tables
      tags:
      - iceberg-table
      description: "Lists the Apache Iceberg\u2122 tables for which you have access\
        \ privileges."
      operationId: listIcebergTables
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/startsWith
      - $ref: common.yaml#/components/parameters/showLimit
      - $ref: common.yaml#/components/parameters/fromName
      - name: deep
        description: Optionally includes dependency information of the table.
        in: query
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IcebergTable'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      summary: Create a snowflake managed iceberg table (clone and undrop are separate
        subresources)
      tags:
      - iceberg-table
      description: Create a snowflake managed iceberg table (clone and undrop are
        separate subresources)
      operationId: createSnowflakeManagedIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTable'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:as-select:
    post:
      summary: Create a snowflake managed iceberg table as select
      tags:
      - iceberg-table
      description: Create a snowflake managed iceberg table as select
      operationId: createSnowflakeManagedIcebergTableAsSelect
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: query
        in: query
        required: true
        description: The SQL select query to run to set up the table values (and possibly
          columns).
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableAsSelect'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-aws-glue-catalog:
    post:
      summary: Create an unmanaged iceberg table from AWS Glue catalog
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from AWS Glue catalog
      operationId: createUnmanagedIcebergTableFromAWSGlueCatalog
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromAWSGlueCatalog'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-delta:
    post:
      summary: Create an unmanaged iceberg table from Delta
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from Delta
      operationId: createUnmanagedIcebergTableFromDelta
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromDelta'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-iceberg-files:
    post:
      summary: Create an unmanaged iceberg table from Iceberg files
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from Iceberg files
      operationId: createUnmanagedIcebergTableFromIcebergFiles
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromIcebergFiles'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables:from-iceberg-rest:
    post:
      summary: Create an unmanaged iceberg table from Iceberg REST
      tags:
      - iceberg-table
      description: Create an unmanaged iceberg table from Iceberg REST
      operationId: createUnmanagedIcebergTableFromIcebergRest
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableFromIcebergRest'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:
    get:
      summary: Describe iceberg table
      tags:
      - iceberg-table
      description: Describe an iceberg table
      operationId: fetchIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IcebergTable'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      summary: Drop iceberg table
      tags:
      - iceberg-table
      description: Drop an iceberg table
      operationId: dropIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      - name: type
        description: Specifies whether the table can be dropped if foreign keys exist
          that reference the table.
        in: query
        required: false
        schema:
          type: string
          enum:
          - CASCADE
          - RESTRICT
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:resume-recluster:
    post:
      summary: Resume recluster of an iceberg table
      tags:
      - iceberg-table
      description: Resume recluster of an iceberg table (iceberg tables managed by
        an external catalog do not allow clustering)
      operationId: resumeReclusterIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:suspend-recluster:
    post:
      summary: Suspend recluster of an iceberg table
      tags:
      - iceberg-table
      description: Suspend recluster of an iceberg table (iceberg tables managed by
        an external catalog do not allow clustering)
      operationId: suspendReclusterIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:refresh:
    post:
      summary: Refreshes the metadata for an Apache Iceberg table that uses an external
        Iceberg catalog
      tags:
      - iceberg-table
      description: Refreshes the metadata for an Apache Iceberg table that uses an
        external Iceberg catalog
      operationId: refreshIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshIcebergTableRequest'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:convert-to-managed:
    post:
      summary: "Converts an Apache Iceberg\u2122 table that uses an external Iceberg\
        \ catalog into a table that uses Snowflake as the catalog"
      tags:
      - iceberg-table
      description: Convert unmanaged iceberg table to managed iceberg table
      operationId: convertToManagedIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConvertToManagedIcebergTableRequest'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:undrop:
    post:
      summary: Undrop iceberg table
      tags:
      - iceberg-table
      description: Undrop an iceberg table
      operationId: undropIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:clone:
    post:
      summary: Clone a snowflake managed iceberg table
      tags:
      - iceberg-table
      description: Clone a snowflake managed iceberg table
      operationId: cloneSnowflakeManagedIcebergTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: targetDatabase
        in: query
        description: Database of the newly created table. Defaults to the source table's
          database.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      - name: targetSchema
        in: query
        description: Schema of the newly created table. Defaults to the source table's
          schema.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableClone'
  /api/v2/databases/{database}/schemas/{schema}/iceberg-tables/{name}:create-like:
    post:
      summary: Create iceberg table like
      tags:
      - iceberg-table
      description: Creates a new table with the same column definitions as an existing
        table, but without copying data from the existing table.
      operationId: createSnowflakeManagedIcebergTableLike
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: targetDatabase
        in: query
        description: Database of the newly created table. Defaults to the source table's
          database.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      - name: targetSchema
        in: query
        description: Schema of the newly created table. Defaults to the source table's
          schema.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IcebergTableLike'
components:
  schemas:
    RefreshIcebergTableRequest:
      type: object
      description: Request model for refreshing iceberg table
      properties:
        metadata_file_relative_path:
          type: string
          description: Specifies a metadata file path for a table created from Iceberg
            files in object storage.
    ConvertToManagedIcebergTableRequest:
      type: object
      description: Request model for convert to managed iceberg table
      properties:
        base_location:
          type: string
          description: The path to a directory where Snowflake can write data and
            metadata files for the table.
        storage_serialization_policy:
          type: string
          description: Specifies the storage serialization policy for the table.
          enum:
          - COMPATIBLE
          - OPTIMIZED
    IcebergTable:
      type: object
      description: A Snowflake iceberg table
      properties:
        name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          description: Name of the iceberg table
        comment:
          type: string
          description: user comment associated to an object in the dictionary
        change_tracking:
          type: boolean
          description: True if change tracking is enabled, allowing streams and CHANGES
            to be used on the entity.
        max_data_extension_time_in_days:
          type: integer
          description: Maximum number of days to extend data retention beyond the
            retention period to prevent a stream becoming stale.
        external_volume:
          type: string
          description: Name of an external volume that will be used for persisted
            Iceberg metadata and data files.
        data_retention_time_in_days:
          type: integer
          description: number of days to retain the old version of deleted/updated
            data
        catalog_sync:
          type: string
          description: Name of the catalog integration to sync this table
        catalog:
          type: string
          description: Name of the catalog integration to use for iceberg tables
        storage_serialization_policy:
          type: string
          description: Storage serialization policy used for managed Iceberg table.
            This include encodings and compressions
          enum:
          - COMPATIBLE
          - OPTIMIZED
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the iceberg table was created.
        database_name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: Database in which the iceberg table is stored
        schema_name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: Schema in which the iceberg table is stored
        owner:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: Role that owns the iceberg table
        owner_role_type:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          readOnly: true
          description: The type of role that owns the iceberg table
        iceberg_table_type:
          type: string
          readOnly: true
          description: Type of Iceberg table. UNMANAGED if the table is not managed
            by Snowflake. NOT ICEBERG otherwise.
        catalog_table_name:
          type: string
          description: Name of the table as recognized by the catalog.
        catalog_namespace:
          type: string
          description: "Catalog namespace for the table. The namespace defined when\
            \ the table was created. Otherwise, the default namespace associated with\
            \ the catalog integration used by the table. If you\u2019re syncing the\
            \ table to Snowflake Open Catalog, the default is null."
        can_write_metadata:
          type: string
          readOnly: true
          description: Signifies whether Snowflake can write metadata to the location
            specified by the file_path.
        cluster_by:
          type: array
          items:
            type: string
          description: Specifies one or more columns or column expressions in the
            table as the clustering key.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/IcebergTableColumn'
        base_location:
          type: string
          description: The path to a directory where Snowflake can write data and
            metadata files for the table.
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        auto_refresh:
          readOnly: true
          type: boolean
          description: Specifies whether to automatically refresh the table metadata
        metadata_file_path:
          type: string
          description: Specifies the relative path of the Iceberg metadata file to
            use for column definitions.
        constraints:
          type: array
          items:
            $ref: '#/components/schemas/Constraint'
      required:
      - name
    IcebergTableAsSelect:
      type: object
      description: Create iceberg table as select
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        columns:
          type: array
          items:
            $ref: '#/components/schemas/IcebergTableColumn'
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            table as the clustering key
          items:
            type: string
        base_location:
          type: string
          description: Specifies the path to a directory where Snowflake can write
            data and metadata files for the table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - base_location
    IcebergTableLike:
      type: object
      description: Create iceberg table as select
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            table as the clustering key
          items:
            type: string
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        base_location:
          type: string
          description: Specifies the path to a directory where Snowflake can write
            data and metadata files for the table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
    IcebergTableClone:
      type: object
      description: Clone iceberg table
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        point_of_time:
          $ref: common.yaml#/components/schemas/PointOfTime
      required:
      - name
    IcebergTableFromAWSGlueCatalog:
      type: object
      description: Create iceberg table from AWS Glue catalog
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        catalog_table_name:
          type: string
          description: Specifies the table name as recognized by the AWS Glue Data
            Catalog.
        catalog_namespace:
          type: string
          description: Specifies the catalog namespace for the table.
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        auto_refresh:
          type: boolean
          description: Specifies whether to automatically refresh the table metadata
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - catalog_table_name
    IcebergTableFromIcebergFiles:
      type: object
      description: Create iceberg table from Iceberg files
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        metadata_file_path:
          type: string
          description: Specifies the relative path of the Iceberg metadata file to
            use for column definitions.
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - metadata_file_path
    IcebergTableFromDelta:
      type: object
      description: Create iceberg table from Delta
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        base_location:
          type: string
          description: "Specifies a relative path from the table\u2019s EXTERNAL_VOLUME\
            \ location to a directory where Snowflake can access your Delta table\
            \ files."
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - base_location
    IcebergTableFromIcebergRest:
      type: object
      description: "Creates or replaces an Apache Iceberg\u2122 table in the current/specified\
        \ schema for an Iceberg REST catalog."
      properties:
        name:
          type: string
          description: Specifies the name for the table, must be unique for the schema
            in which the table is created
        external_volume:
          type: string
          description: Specifies the name of the external volume to use for the table
        catalog_table_name:
          type: string
          description: Specifies the table name as recognized by the AWS Glue Data
            Catalog.
        catalog_namespace:
          type: string
          description: Specifies the catalog namespace for the table.
        replace_invalid_characters:
          type: boolean
          description: Specifies whether to replace invalid characters in the column
            names
        auto_refresh:
          type: boolean
          description: Specifies whether to automatically refresh the table metadata
        catalog:
          type: string
          description: Specifies the name of the catalog integration to use for the
            table
        comment:
          type: string
          description: Specifies a comment for the table
      required:
      - name
      - catalog_table_name
    IcebergTableColumn:
      type: object
      description: A column in the snowflake catalog iceberg table
      properties:
        name:
          type: string
          pattern: ^"([^"]|"")+"|[a-zA-Z_][a-zA-Z0-9_$]*$
          description: Column name
        datatype:
          type: string
          description: The data type for the column
        comment:
          type: string
          description: Specifies a comment for the column
        nullable:
          type: boolean
          description: Argument null return acceptance criteria
        default_value:
          type: string
          description: Default value for the column
      required:
      - name
      - datatype
    Constraint:
      type: object
      description: Constraints define integrity and consistency rules for data stored
        in tables.
      properties:
        name:
          type: string
          description: Name of the Constraint
        column_names:
          type: array
          items:
            type: string
            description: Column name for the constraint
        constraint_type:
          type: string
          description: Type of the constraint
      discriminator:
        propertyName: constraint_type
        mapping:
          PRIMARY KEY: PrimaryKey
          FOREIGN KEY: ForeignKey
          UNIQUE: UniqueKey
    PrimaryKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: A primary key is the column or columns that contain values that
        uniquely identify each row in a table.
    UniqueKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: Unique keys are columns in a table that uniquely identify items
        in the rows. This sounds a lot like a primary key, but the main difference
        is that unique keys can have NULL values.
    ForeignKey:
      allOf:
      - $ref: '#/components/schemas/Constraint'
      type: object
      description: Foreign keys link data in one table to the data in another table.
      properties:
        referenced_table_name:
          type: string
        referenced_column_names:
          type: array
          items:
            type: string
      required:
      - referenced_table_name
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
