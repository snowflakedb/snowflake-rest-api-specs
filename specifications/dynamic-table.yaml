openapi: 3.0.0
servers:
- description: Snowflake Dynamic Table API
  url: https://org-account.snowflakecomputing.com
info:
  version: 0.0.1
  title: Snowflake Dynamic Table API
  description: The Snowflake Dynamic Table API is a REST API that you can use to access,
    update, and perform certain actions on Dynamic Tables resource in a Snowflake
    database.
  contact:
    name: Snowflake, Inc.
    url: https://snowflake.com
    email: support@snowflake.com
paths:
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables:
    get:
      summary: List dynamic tables
      tags:
      - dynamic-table
      description: Lists the dynamic tables under the database and schema.
      operationId: listDynamicTables
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/like
      - $ref: common.yaml#/components/parameters/startsWith
      - $ref: common.yaml#/components/parameters/showLimit
      - $ref: common.yaml#/components/parameters/fromName
      - name: deep
        description: Optionally includes dependency information of the dynamic table.
        in: query
        required: false
        schema:
          type: boolean
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DynamicTable'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    post:
      summary: Create a dynamic table
      tags:
      - dynamic-table
      description: Create a dynamic table, with standard create modifiers as query
        parameters. See the Dynamic Table component definition for what is required
        to be provided in the request body.
      operationId: createDynamicTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/createMode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicTable'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:
    get:
      summary: Fetch a dynamic table.
      tags:
      - dynamic-table
      description: Fetch a Dynamic Table.
      operationId: fetchDynamicTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      responses:
        '200':
          description: successful
          headers:
            X-Snowflake-Request-ID:
              $ref: common.yaml#/components/headers/X-Snowflake-Request-ID
            Link:
              $ref: common.yaml#/components/headers/Link
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DynamicTable'
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
    delete:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Delete a dynamic table
      tags:
      - dynamic-table
      description: Delete a dynamic table with the given name. If ifExists is used,
        the operation will succeed even if the object does not exist. Otherwise, there
        will be a failure if the drop is unsuccessful.
      operationId: deleteDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:clone:
    post:
      summary: Clone dynamic table
      tags:
      - dynamic-table
      description: Create a new dynamic table by cloning from the specified resource
      operationId: cloneDynamicTable
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/createMode
      - $ref: common.yaml#/components/parameters/copyGrants
      - name: targetDatabase
        in: query
        description: Database of the newly created dynamic table. Defaults to the
          source table's database.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      - name: targetSchema
        in: query
        description: Schema of the newly created dynamic table. Defaults to the source
          table's schema.
        schema:
          $ref: ./common.yaml#/components/schemas/Identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DynamicTableClone'
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:undrop:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      summary: Undrop a dynamic table
      tags:
      - dynamic-table
      description: Undrop specified dynamic table
      operationId: undropDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:suspend:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Suspend refreshes on the dynamic table
      tags:
      - dynamic-table
      description: Suspend refreshes on the dynamic table
      operationId: suspendDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:resume:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Resume refreshes on the dynamic table
      tags:
      - dynamic-table
      description: Resume refreshes on the dynamic table
      operationId: resumeDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:refresh:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Refresh the dynamic table
      tags:
      - dynamic-table
      description: Specifies that the dynamic table should be manually refreshed
      operationId: refreshDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:suspend-recluster:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Suspend recluster of a dynamic table
      tags:
      - dynamic-table
      description: Suspend recluster of a dynamic table
      operationId: suspendReclusterDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:resume-recluster:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      summary: Resume recluster of a dynamic table
      tags:
      - dynamic-table
      description: Resume recluster of a dynamic table
      operationId: resumeReclusterDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
  /api/v2/databases/{database}/schemas/{schema}/dynamic-tables/{name}:swap-with:
    post:
      parameters:
      - $ref: common.yaml#/components/parameters/database
      - $ref: common.yaml#/components/parameters/schema
      - $ref: common.yaml#/components/parameters/name
      - $ref: common.yaml#/components/parameters/ifExists
      - name: targetName
        description: The name of the target dynamic table to be swapped with.
        in: query
        required: true
        schema:
          $ref: common.yaml#/components/schemas/Identifier
      - name: targetDatabase
        in: query
        description: Database of the target dynamic table. Defaults to the source
          table's database.
        schema:
          $ref: common.yaml#/components/schemas/Identifier
      - name: targetSchema
        in: query
        description: Schema of the target dynamic table. Defaults to the source table's
          schema.
        schema:
          $ref: common.yaml#/components/schemas/Identifier
      summary: Swap with another dynamic table
      tags:
      - dynamic-table
      description: Swap with another dynamic table
      operationId: swapWithDynamicTable
      responses:
        '200':
          $ref: common.yaml#/components/responses/200SuccessResponse
        '202':
          $ref: common.yaml#/components/responses/202SuccessAcceptedResponse
        '400':
          $ref: common.yaml#/components/responses/400BadRequest
        '401':
          $ref: common.yaml#/components/responses/401Unauthorized
        '403':
          $ref: common.yaml#/components/responses/403Forbidden
        '404':
          $ref: common.yaml#/components/responses/404NotFound
        '405':
          $ref: common.yaml#/components/responses/405MethodNotAllowed
        '408':
          $ref: common.yaml#/components/responses/408RequestTimeout
        '409':
          $ref: common.yaml#/components/responses/409Conflict
        '410':
          $ref: common.yaml#/components/responses/410Gone
        '429':
          $ref: common.yaml#/components/responses/429LimitExceeded
        '500':
          $ref: common.yaml#/components/responses/500InternalServerError
        '503':
          $ref: common.yaml#/components/responses/503ServiceUnavailable
        '504':
          $ref: common.yaml#/components/responses/504GatewayTimeout
components:
  schemas:
    DynamicTable:
      type: object
      description: A Snowflake dynamic table object.
      properties:
        name:
          type: string
          description: Specifies the name for the dynamic table, must be unique for
            the schema in which the dynamic table is created
        kind:
          type: string
          enum:
          - PERMANENT
          - TRANSIENT
          default: PERMANENT
          description: Specifies the dynamic table type, permanent (default) or transient.
        columns:
          type: array
          items:
            $ref: '#/components/schemas/DynamicTableColumn'
        target_lag:
          $ref: common.yaml#/components/schemas/TargetLag
        refresh_mode:
          type: string
          description: Specifies the refresh type for the dynamic table
          enum:
          - AUTO
          - FULL
          - INCREMENTAL
        initialize:
          type: string
          description: Specifies the behavior of the initial refresh of the dynamic
            table
          enum:
          - ON_CREATE
          - ON_SCHEDULE
        warehouse:
          type: string
          description: Specifies the name of the warehouse that provides the compute
            resources for refreshing the dynamic table
          example: test_wh
        cluster_by:
          type: array
          description: Specifies one or more columns or column expressions in the
            dynamic table as the clustering key
          items:
            type: string
        query:
          type: string
          description: Specifies the query whose results the dynamic table should
            contain
          example: SELECT * FROM foo
        data_retention_time_in_days:
          type: integer
          description: Specifies the retention period for the dynamic table so that
            Time Travel actions (SELECT, CLONE) can be performed on historical data
            in the dynamic table
        max_data_extension_time_in_days:
          type: integer
          description: Specifies the retention period for the dynamic table so that
            Time Travel actions (SELECT, CLONE) can be performed on historical data
            in the dynamic table
        comment:
          type: string
          description: Specifies a comment for the dynamic table.
        created_on:
          type: string
          format: date-time
          readOnly: true
          description: Date and time when the dynamic table was created.
        database_name:
          type: string
          readOnly: true
          description: Database in which the dynamic table is stored
        schema_name:
          type: string
          readOnly: true
          description: Schema in which the dynamic table is stored
        rows:
          type: integer
          format: int64
          readOnly: true
          description: Number of rows in the dynamic table.
        bytes:
          type: integer
          format: int64
          readOnly: true
          description: Number of bytes that will be scanned if the entire table is
            scanned in a query. Note that this number may be different than the number
            of actual physical bytes stored on-disk for the table
        scheduling_state:
          type: string
          enum:
          - RUNNING
          - SUSPENDED
          readOnly: true
          description: Scheduling state (RUNNING or SUSPENDED)
        automatic_clustering:
          type: boolean
          readOnly: true
          description: If Automatic Clustering is enabled for your account, specifies
            whether it is explicitly enabled or disabled for the dynamic table.
        owner:
          type: string
          readOnly: true
          description: Role that owns the table
        owner_role_type:
          type: string
          readOnly: true
          description: The type of role that owns the object.
        budget:
          type: string
          readOnly: true
          description: Name of the budget if the object is monitored by a budget
      required:
      - name
      - target_lag
      - warehouse
      - query
    DynamicTableColumn:
      type: object
      description: A column in the dynamic table
      properties:
        name:
          type: string
          description: Column name
        datatype:
          type: string
          description: The data type for the column
        comment:
          type: string
          description: Specifies a comment for the column
      required:
      - name
    DynamicTableClone:
      type: object
      description: Clone dynamic table
      properties:
        name:
          type: string
          description: Specifies the name for the dynamic table, must be unique for
            the schema in which the dynamic table is created
        target_lag:
          $ref: common.yaml#/components/schemas/TargetLag
        warehouse:
          type: string
          description: Specifies the name of the warehouse that provides the compute
            resources for refreshing the dynamic table
        point_of_time:
          $ref: common.yaml#/components/schemas/PointOfTime
      required:
      - name
  securitySchemes:
    KeyPair:
      $ref: common.yaml#/components/securitySchemes/KeyPair
    ExternalOAuth:
      $ref: common.yaml#/components/securitySchemes/ExternalOAuth
    SnowflakeOAuth:
      $ref: common.yaml#/components/securitySchemes/SnowflakeOAuth
security:
- KeyPair: []
- ExternalOAuth: []
- SnowflakeOAuth: []
