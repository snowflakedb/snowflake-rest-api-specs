{
	"info": {
		"_postman_id": "c5c48723-f9ad-4291-9a27-d1f1023b31a5",
		"name": "Snowflake Services API",
		"description": "The Snowflake Services API is a REST API that you can use to access, update, and perform certain actions on Services resource in a Snowflake database.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43111250"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{schema}",
													"item": [
														{
															"name": "services",
															"item": [
																{
																	"name": "{name}",
																	"item": [
																		{
																			"name": "logs",
																			"item": [
																				{
																					"name": "fetch Service Logs",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name",
																								"logs"
																							],
																							"query": [
																								{
																									"key": "instanceId",
																									"value": "<integer>",
																									"description": "(Required) ID of the service instance, starting with 0."
																								},
																								{
																									"key": "containerName",
																									"value": "<string>",
																									"description": "(Required) Container name as specified in the service specification file."
																								},
																								{
																									"key": "numLines",
																									"value": "<integer>",
																									"description": "Number of trailing log lines to retrieve."
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "Fetch the logs for a given service."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"system$get_service_logs\": \"<string>\"\n}"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/logs?instanceId=<integer>&containerName=<string>&numLines=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"logs"
																									],
																									"query": [
																										{
																											"key": "instanceId",
																											"value": "<integer>",
																											"description": "(Required) ID of the service instance, starting with 0."
																										},
																										{
																											"key": "containerName",
																											"value": "<string>",
																											"description": "(Required) Container name as specified in the service specification file."
																										},
																										{
																											"key": "numLines",
																											"value": "<integer>",
																											"description": "Number of trailing log lines to retrieve."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "status",
																			"item": [
																				{
																					"name": "fetch Service Status",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name",
																								"status"
																							],
																							"query": [
																								{
																									"key": "timeout",
																									"value": "<integer>",
																									"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "Fetch the status for a given service."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"system$get_service_status\": \"<string>\"\n}"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/status?timeout=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"status"
																									],
																									"query": [
																										{
																											"key": "timeout",
																											"value": "<integer>",
																											"description": "Number of seconds to wait for the service to reach a steady state (for example, READY) before returning the status. If the service does not reach a steady state within the specified time, Snowflake returns the current state."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "containers",
																			"item": [
																				{
																					"name": "list Service Containers",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name",
																								"containers"
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "List all the containers of the service"
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"database_name\": \"\\\"\\\"\\\"\\\"\\\"m\\\"\\\"\\\"\",\n    \"schema_name\": \"G\",\n    \"service_name\": \"\\\"\\\"\\\")%J\\\"\\\"J\\\"\\\"\\\"\\\"\\\"\\\"\\\"\",\n    \"service_status\": \"<string>\",\n    \"instance_id\": \"<string>\",\n    \"instance_status\": \"<string>\",\n    \"container_name\": \"<string>\",\n    \"status\": \"<string>\",\n    \"message\": \"<string>\",\n    \"image_name\": \"<string>\",\n    \"image_digest\": \"<string>\",\n    \"restart_count\": \"<integer>\",\n    \"start_time\": \"<string>\"\n  },\n  {\n    \"database_name\": \"e$p3mh2W\",\n    \"schema_name\": \"\\\"\\\"\\\";\\\"\\\"TY%\\\"\\\"\\\"\\\"j\\\"\\\"\\\"\",\n    \"service_name\": \"lvLRvo\",\n    \"service_status\": \"<string>\",\n    \"instance_id\": \"<string>\",\n    \"instance_status\": \"<string>\",\n    \"container_name\": \"<string>\",\n    \"status\": \"<string>\",\n    \"message\": \"<string>\",\n    \"image_name\": \"<string>\",\n    \"image_digest\": \"<string>\",\n    \"restart_count\": \"<integer>\",\n    \"start_time\": \"<string>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/containers",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"containers"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "instances",
																			"item": [
																				{
																					"name": "list Service Instances",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name",
																								"instances"
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "List all the instances of the service"
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"database_name\": \"G1wZ\",\n    \"schema_name\": \"\\\"M\\\"\\\"]\\\"\\\"\\\"\",\n    \"service_name\": \"\\\"\\\"\\\"E\\\"\\\"P?\\\"\\\"\\\"\",\n    \"service_status\": \"<string>\",\n    \"instance_id\": \"<string>\",\n    \"status\": \"<string>\",\n    \"spec_digest\": \"<string>\",\n    \"creation_time\": \"<string>\",\n    \"start_time\": \"<string>\"\n  },\n  {\n    \"database_name\": \"XqBWytnaKVm\",\n    \"schema_name\": \"\\\"9\\\"\\\"\\\"\\\"\\\"\\\"u\\\"\\\"\\\"\",\n    \"service_name\": \"oMJ\",\n    \"service_status\": \"<string>\",\n    \"instance_id\": \"<string>\",\n    \"status\": \"<string>\",\n    \"spec_digest\": \"<string>\",\n    \"creation_time\": \"<string>\",\n    \"start_time\": \"<string>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/instances",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"instances"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "roles",
																			"item": [
																				{
																					"name": "list Service Roles",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name",
																								"roles"
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "List all the service roles of the service"
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"created_on\": \"<dateTime>\",\n    \"name\": \"<string>\",\n    \"comment\": \"<string>\"\n  },\n  {\n    \"created_on\": \"<dateTime>\",\n    \"name\": \"<string>\",\n    \"comment\": \"<string>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/roles",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"roles"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "endpoints",
																			"item": [
																				{
																					"name": "List the endpoints in a service.",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name",
																								"endpoints"
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "Pd_q_mjpcF2",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "Lists the endpoints in a Snowpark Container Services service (or a job service)."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"portRange\": \"<string>\",\n    \"protocol\": \"HTTP\",\n    \"is_public\": false,\n    \"ingress_url\": \"<string>\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"port\": \"<integer>\",\n    \"portRange\": \"<string>\",\n    \"protocol\": \"HTTP\",\n    \"is_public\": false,\n    \"ingress_url\": \"<string>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name/endpoints",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"services",
																										":name",
																										"endpoints"
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "fetch Service",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Fetch a service."
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "Link",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"name\": \"\\\"\\\"\\\"C}d?\\\"\\\"spm\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"\\\"Sw8/`\\\"\\\"hjJ\\\"\\\"\\\"\\\"\\\"\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"current_instances\": \"<integer>\",\n  \"target_instances\": \"<integer>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"4\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"\\\"g\\\"\\\"K[\\\"\\\"u\\\"\\\"y\\\"\",\n  \"owner\": \"<string>\",\n  \"dns_name\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"updated_on\": \"<dateTime>\",\n  \"resumed_on\": \"<dateTime>\",\n  \"suspended_on\": \"<dateTime>\",\n  \"auto_suspend_secs\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"is_job\": \"<boolean>\",\n  \"spec_digest\": \"<string>\",\n  \"is_upgrading\": \"<boolean>\",\n  \"managing_object_domain\": \"<string>\",\n  \"managing_object_name\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Create a (or alter an existing) service.",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Create a (or alter an existing) service. Even if the operation is just an alter, the full property set must be provided."
																			},
																			"response": [
																				{
																					"name": "Successful request",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "Link",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Delete a service",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services",
																						":name"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Delete a service with the given name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{service}",
																	"item": [
																		{
																			"name": "roles",
																			"item": [
																				{
																					"name": "{name}",
																					"item": [
																						{
																							"name": "grants-of",
																							"item": [
																								{
																									"name": "list Service Role Grants Of",
																									"request": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"services",
																												":service",
																												"roles",
																												":name",
																												"grants-of"
																											],
																											"variable": [
																												{
																													"key": "database",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																												},
																												{
																													"key": "schema",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																												},
																												{
																													"key": "service",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Name of the service that contains the service role."
																												},
																												{
																													"key": "name",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Identifier (i.e. name) for the resource."
																												}
																											]
																										},
																										"description": "List all the grants of the service role"
																									},
																									"response": [
																										{
																											"name": "successful",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "OK",
																											"code": 200,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												},
																												{
																													"key": "Link",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "[\n  {\n    \"created_on\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"granted_to\": \"<string>\",\n    \"grantee_name\": \"<string>\",\n    \"granted_by\": \"<string>\"\n  },\n  {\n    \"created_on\": \"<dateTime>\",\n    \"role\": \"<string>\",\n    \"granted_to\": \"<string>\",\n    \"grantee_name\": \"<string>\",\n    \"granted_by\": \"<string>\"\n  }\n]"
																										},
																										{
																											"name": "Successfully accepted the request, but it is not completed yet.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Accepted",
																											"code": 202,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "Location",
																													"value": "<string>",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																										},
																										{
																											"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Bad Request",
																											"code": 400,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Unauthorized",
																											"code": 401,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Forbidden",
																											"code": 403,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Not Found",
																											"code": 404,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Method Not Allowed",
																											"code": 405,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Too Many Requests",
																											"code": 429,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Internal Server Error",
																											"code": 500,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Service Unavailable",
																											"code": 503,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants-of",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants-of"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Gateway Timeout",
																											"code": 504,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										}
																									]
																								}
																							]
																						},
																						{
																							"name": "grants",
																							"item": [
																								{
																									"name": "list Service Role Grants To",
																									"request": {
																										"method": "GET",
																										"header": [
																											{
																												"key": "Accept",
																												"value": "application/json"
																											}
																										],
																										"url": {
																											"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																											"host": [
																												"{{baseUrl}}"
																											],
																											"path": [
																												"api",
																												"v2",
																												"databases",
																												":database",
																												"schemas",
																												":schema",
																												"services",
																												":service",
																												"roles",
																												":name",
																												"grants"
																											],
																											"variable": [
																												{
																													"key": "database",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																												},
																												{
																													"key": "schema",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																												},
																												{
																													"key": "service",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Name of the service that contains the service role."
																												},
																												{
																													"key": "name",
																													"value": "Pd_q_mjpcF2",
																													"description": "(Required) Identifier (i.e. name) for the resource."
																												}
																											]
																										},
																										"description": "List all the grants given to the service role"
																									},
																									"response": [
																										{
																											"name": "successful",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "OK",
																											"code": 200,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												},
																												{
																													"key": "Link",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "[\n  {\n    \"created_on\": \"<dateTime>\",\n    \"privilege\": \"<string>\",\n    \"granted_on\": \"<string>\",\n    \"name\": \"<string>\",\n    \"granted_to\": \"<string>\",\n    \"grantee_name\": \"<string>\"\n  },\n  {\n    \"created_on\": \"<dateTime>\",\n    \"privilege\": \"<string>\",\n    \"granted_on\": \"<string>\",\n    \"name\": \"<string>\",\n    \"granted_to\": \"<string>\",\n    \"grantee_name\": \"<string>\"\n  }\n]"
																										},
																										{
																											"name": "Successfully accepted the request, but it is not completed yet.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Accepted",
																											"code": 202,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "Location",
																													"value": "<string>",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																										},
																										{
																											"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Bad Request",
																											"code": 400,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Unauthorized",
																											"code": 401,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Forbidden",
																											"code": 403,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Not Found",
																											"code": 404,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Method Not Allowed",
																											"code": 405,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Too Many Requests",
																											"code": 429,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Internal Server Error",
																											"code": 500,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Service Unavailable",
																											"code": 503,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										},
																										{
																											"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																											"originalRequest": {
																												"method": "GET",
																												"header": [
																													{
																														"key": "Accept",
																														"value": "application/json"
																													},
																													{
																														"key": "Authorization",
																														"value": "Bearer <token>",
																														"description": "Added as a part of security scheme: bearer"
																													}
																												],
																												"url": {
																													"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/:service/roles/:name/grants",
																													"host": [
																														"{{baseUrl}}"
																													],
																													"path": [
																														"api",
																														"v2",
																														"databases",
																														":database",
																														"schemas",
																														":schema",
																														"services",
																														":service",
																														"roles",
																														":name",
																														"grants"
																													],
																													"variable": [
																														{
																															"key": "database"
																														},
																														{
																															"key": "schema"
																														},
																														{
																															"key": "service"
																														},
																														{
																															"key": "name"
																														}
																													]
																												}
																											},
																											"status": "Gateway Timeout",
																											"code": 504,
																											"_postman_previewlanguage": "json",
																											"header": [
																												{
																													"key": "Content-Type",
																													"value": "application/json"
																												},
																												{
																													"key": "X-Snowflake-Request-ID",
																													"value": "",
																													"description": {
																														"content": "",
																														"type": "text/plain"
																													}
																												}
																											],
																											"cookie": [],
																											"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																										}
																									]
																								}
																							]
																						}
																					]
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:resume",
																	"item": [
																		{
																			"name": "resume Service",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services",
																						"{{name}}:resume"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Resume a service."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:resume?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:resume"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:suspend",
																	"item": [
																		{
																			"name": "suspend Service",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services",
																						"{{name}}:suspend"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "Pd_q_mjpcF2",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Suspend a service."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services/{{name}}:suspend?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"services",
																								"{{name}}:suspend"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List services",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"services"
																			],
																			"query": [
																				{
																					"key": "like",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																				},
																				{
																					"key": "startsWith",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																				},
																				{
																					"key": "showLimit",
																					"value": "<integer>",
																					"description": "Query parameter to limit the maximum number of rows returned by a command."
																				},
																				{
																					"key": "fromName",
																					"value": "<string>",
																					"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "Pd_q_mjpcF2",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "Pd_q_mjpcF2",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Lists the services under the database and schema."
																	},
																	"response": [
																		{
																			"name": "successful",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "Link",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "[]"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Create a service",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"services"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "Pd_q_mjpcF2",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "Pd_q_mjpcF2",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create a service, with standard create modifiers as query parameters. See the Service component definition for what is required to be provided in the request body."
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"OEk\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"ftdCqSi1\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\",\n  \"auto_resume\": \"<boolean>\",\n  \"min_ready_instances\": \"<integer>\",\n  \"min_instances\": \"<integer>\",\n  \"max_instances\": \"<integer>\",\n  \"database_name\": \"\\\"U5uJ\\\"\\\"5\\\"\\\"\\\"\\\"\\\"\",\n  \"schema_name\": \"Z1qNqaSHzPI\",\n  \"auto_suspend_secs\": \"<long>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include: - `errorIfExists`: Throws an error if you try to create a resource that already exists. - `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "services:execute-job",
															"item": [
																{
																	"name": "Execute a job service",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"services:execute-job"
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "Pd_q_mjpcF2",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "Pd_q_mjpcF2",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create and execute a job service. See the JobService component definition for what is required to be provided in the request body."
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"'c\\\"\\\"\\\"\",\n  \"compute_pool\": \"<string>\",\n  \"spec\": {\n    \"spec_type\": \"<string>\"\n  },\n  \"status\": \"<string>\",\n  \"external_access_integrations\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"query_warehouse\": \"pZvNaj\",\n  \"comment\": \"<string>\",\n  \"is_async_job\": \"<boolean>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/services:execute-job",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"services:execute-job"
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "name",
			"value": "Pd_q_mjpcF2"
		}
	]
}