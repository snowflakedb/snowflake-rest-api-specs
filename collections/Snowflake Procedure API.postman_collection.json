{
	"info": {
		"_postman_id": "e1b36a33-e9e8-4161-a44e-57c1ef1dcb19",
		"name": "Snowflake Procedure API",
		"description": "The Snowflake Procedure API is a REST API that you can use to access, update, and perform certain actions on Procedure resource in a Snowflake database.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43111250"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{schema}",
													"item": [
														{
															"name": "procedures",
															"item": [
																{
																	"name": "{nameWithArgs}",
																	"item": [
																		{
																			"name": "Fetch a procedure",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures",
																						":nameWithArgs"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "a8A",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "a8A",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "nameWithArgs",
																							"value": "<string>",
																							"description": "(Required) Function's name with Args"
																						}
																					]
																				},
																				"description": "Fetch a procedure"
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "Link",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"name\": \"\\\"&\\\"\\\"A\\\"\\\"N\\\"\\\"t\\\"\\\"\\\"\\\"h\\\"\\\"\\\"\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"\\\"\\\"@z\\\"\\\"\\\"\",\n      \"datatype\": \"INT\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"Yi_I7JKgN\",\n      \"datatype\": \"BINARY\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"?I\\\"\\\"\\\"\\\"\\\"\\\"\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"schema_name\": \"\\\"3\\\"\\\"\\\"\\\"V\\\"\\\"\\\"\\\"F=\\\"\",\n  \"database_name\": \"ADQn\",\n  \"min_num_arguments\": \"<integer>\",\n  \"max_num_arguments\": \"<integer>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"is_builtin\": \"<boolean>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Delete a procedure",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures",
																						":nameWithArgs"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "a8A",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "a8A",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "nameWithArgs",
																							"value": "<string>",
																							"description": "(Required) Function's name with Args"
																						}
																					]
																				},
																				"description": "Delete a procedure"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/:nameWithArgs?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								":nameWithArgs"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "nameWithArgs"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{nameWithArgs}:call",
																	"item": [
																		{
																			"name": "Call a procedure",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures",
																						"{{nameWithArgs}}:call"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "a8A",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "a8A",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Call a procedure"
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "Link",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "[]"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"call_arguments\": [\n    {\n      \"name\": \"jC\",\n      \"datatype\": \"CHARACTER\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    },\n    {\n      \"name\": \"D_F\",\n      \"datatype\": \"REAL\",\n      \"value\": {\n        \"description\": \"Value of the call argument\"\n      }\n    }\n  ]\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures/{{nameWithArgs}}:call",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"procedures",
																								"{{nameWithArgs}}:call"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List procedures",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"procedures"
																			],
																			"query": [
																				{
																					"key": "like",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "a8A",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "a8A",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "List procedures"
																	},
																	"response": [
																		{
																			"name": "successful",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "Link",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"name\": \"\\\"\\\\BI8\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\",\n    \"arguments\": [\n      {\n        \"name\": \"\\\"\\\"\\\"L4\\\"\\\"R\\\"\\\"\\\"\\\"\\\"\\\"O\\\"\\\"|\\\"\",\n        \"datatype\": \"DATETIME\",\n        \"default_value\": \"<string>\"\n      },\n      {\n        \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"0\\\"\\\"\\\"\\\"1\\\"\\\"^h\\\"\\\"\\\"\",\n        \"datatype\": \"FLOAT\",\n        \"default_value\": \"<string>\"\n      }\n    ],\n    \"return_type\": {\n      \"type\": \"SHB\"\n    },\n    \"language_config\": {\n      \"language\": \"<string>\",\n      \"called_on_null_input\": \"<boolean>\"\n    },\n    \"body\": \"<string>\",\n    \"execute_as\": \"CALLER\",\n    \"is_secure\": \"<boolean>\",\n    \"comment\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"schema_name\": \"\\\"HP\\\"\\\"HR\\\"\",\n    \"database_name\": \"LQf\",\n    \"min_num_arguments\": \"<integer>\",\n    \"max_num_arguments\": \"<integer>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"is_builtin\": \"<boolean>\"\n  },\n  {\n    \"name\": \"mbeQQSh\",\n    \"arguments\": [\n      {\n        \"name\": \"\\\".\\\"\\\"\\\"\\\"O\\\"\\\"\\\"\\\"\\\"\",\n        \"datatype\": \"BIGINT\",\n        \"default_value\": \"<string>\"\n      },\n      {\n        \"name\": \"\\\"\\\"\\\"s\\\"\\\"\\\"\\\"<\\\"\\\"o\\\"\\\"\\\"\",\n        \"datatype\": \"TIMESTAMP_LTZ\",\n        \"default_value\": \"<string>\"\n      }\n    ],\n    \"return_type\": {\n      \"type\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"-2\\\"\\\"\\\"\"\n    },\n    \"language_config\": {\n      \"language\": \"<string>\",\n      \"called_on_null_input\": \"<boolean>\"\n    },\n    \"body\": \"<string>\",\n    \"execute_as\": \"CALLER\",\n    \"is_secure\": \"<boolean>\",\n    \"comment\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"schema_name\": \"XUSZ\",\n    \"database_name\": \"Wtk\",\n    \"min_num_arguments\": \"<integer>\",\n    \"max_num_arguments\": \"<integer>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"is_builtin\": \"<boolean>\"\n  }\n]"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gone",
																			"code": 410,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?like=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Create a procedure",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"procedures"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "copyGrants",
																					"value": "false",
																					"description": "Query parameter to enable copy grants when creating the object."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "a8A",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "a8A",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create a procedure"
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gone",
																			"code": 410,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"NMw9bE_\",\n  \"arguments\": [\n    {\n      \"name\": \"\\\"c\\\"\\\"F|Otc8o:\\\"\",\n      \"datatype\": \"VARCHAR\",\n      \"default_value\": \"<string>\"\n    },\n    {\n      \"name\": \"\\\"\\\"\\\"K\\\"\\\"\\\"\\\"iK\\\"\",\n      \"datatype\": \"INTEGER\",\n      \"default_value\": \"<string>\"\n    }\n  ],\n  \"return_type\": {\n    \"type\": \"\\\"\\\"\\\"{)|dg\\\"\"\n  },\n  \"language_config\": {\n    \"language\": \"<string>\",\n    \"called_on_null_input\": \"<boolean>\"\n  },\n  \"body\": \"<string>\",\n  \"execute_as\": \"CALLER\",\n  \"is_secure\": \"<boolean>\",\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/procedures?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"procedures"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "nameWithArgs",
			"value": "<string>"
		}
	]
}