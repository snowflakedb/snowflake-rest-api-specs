{
	"info": {
		"_postman_id": "adcc2510-5676-4e6a-93d1-12f12431ffef",
		"name": "Snowflake Task API",
		"description": "The Snowflake Task API is a REST API that you can use to access, update, and perform certain actions on task resources in a Snowflake database.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43111250"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{schema}",
													"item": [
														{
															"name": "tasks",
															"item": [
																{
																	"name": "{name}",
																	"item": [
																		{
																			"name": "dependents",
																			"item": [
																				{
																					"name": "Fetch the dependent tasks of a task",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"dependents"
																							],
																							"query": [
																								{
																									"key": "recursive",
																									"value": "true",
																									"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "This operation returns a list of the dependent tasks of the task with identifier {name}."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"e\\\"\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"{H\\\"\",\n    \"schedule\": {\n      \"schedule_type\": \"<string>\"\n    },\n    \"comment\": \"<string>\",\n    \"finalize\": \"<string>\",\n    \"task_auto_retry_attempts\": \"<integer>\",\n    \"config\": {\n      \"amet2b\": \"adipisicing cillum laboris\",\n      \"exercitation2\": -86020070.66797736,\n      \"cupidatata0\": \"commodo ut\"\n    },\n    \"session_parameters\": {\n      \"enim_0a_\": -18246886.22637151,\n      \"reprehenderit8d\": -82398813.82555288\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"task_relations\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"target_completion_interval\": {\n      \"minutes\": 5764628,\n      \"schedule_type\": \"<string>\"\n    },\n    \"serverless_task_min_statement_size\": \"<string>\",\n    \"serverless_task_max_statement_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"suspended\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  },\n  {\n    \"name\": \"\\\"\\\"\\\"OFC\\\"\\\"O\\\"\\\"\\\"\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"\\\"n\\\"\\\"(\\\"\\\"\\\"\\\"\\\"\",\n    \"schedule\": {\n      \"schedule_type\": \"<string>\"\n    },\n    \"comment\": \"<string>\",\n    \"finalize\": \"<string>\",\n    \"task_auto_retry_attempts\": \"<integer>\",\n    \"config\": {\n      \"tempor01\": \"fugiat ad labore\"\n    },\n    \"session_parameters\": {\n      \"consequat_1b8\": 22641003.424419463\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"task_relations\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"target_completion_interval\": {\n      \"minutes\": 14762848,\n      \"schedule_type\": \"<string>\"\n    },\n    \"serverless_task_min_statement_size\": \"<string>\",\n    \"serverless_task_max_statement_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"started\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/dependents?recursive=true",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"dependents"
																									],
																									"query": [
																										{
																											"key": "recursive",
																											"value": "true",
																											"description": "Specifies whether to limit the output to include only direct child tasks or to include all recursive child tasks."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "current_graphs",
																			"item": [
																				{
																					"name": "Get the graph runs that are executing or scheduled for the task for the next 8 days.",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"current_graphs"
																							],
																							"query": [
																								{
																									"key": "resultLimit",
																									"value": "<integer>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "This function returns details for graph runs that are currently executing or are next scheduled to run within the next 8 days."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SUCCEEDED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  },\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SKIPPED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current_graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "current-graphs",
																			"item": [
																				{
																					"name": "Get the graph runs that are executing or scheduled for the task for the next 8 days.",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"current-graphs"
																							],
																							"query": [
																								{
																									"key": "resultLimit",
																									"value": "<integer>"
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "This function returns details for graph runs that are currently executing or are next scheduled to run within the next 8 days."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SUCCEEDED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  },\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SKIPPED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/current-graphs?resultLimit=<integer>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"current-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>"
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "complete_graphs",
																			"item": [
																				{
																					"name": "Get the graph runs that are completed for the task.",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"complete_graphs"
																							],
																							"query": [
																								{
																									"key": "resultLimit",
																									"value": "<integer>",
																									"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																								},
																								{
																									"key": "errorOnly",
																									"value": "<boolean>",
																									"description": "Whether to only return results for tasks runs that have failed. Default is false."
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "This function returns details for graph runs that are completed."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SUCCEEDED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  },\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SKIPPED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete_graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete_graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "complete-graphs",
																			"item": [
																				{
																					"name": "Get the graph runs that are completed for the task.",
																					"request": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name",
																								"complete-graphs"
																							],
																							"query": [
																								{
																									"key": "resultLimit",
																									"value": "<integer>",
																									"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																								},
																								{
																									"key": "errorOnly",
																									"value": "<boolean>",
																									"description": "Whether to only return results for tasks runs that have failed. Default is false."
																								}
																							],
																							"variable": [
																								{
																									"key": "database",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																								},
																								{
																									"key": "schema",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																								},
																								{
																									"key": "name",
																									"value": "ivroF3i",
																									"description": "(Required) Identifier (i.e. name) for the resource."
																								}
																							]
																						},
																						"description": "This function returns details for graph runs that are completed."
																					},
																					"response": [
																						{
																							"name": "successful",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "OK",
																							"code": 200,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "Link",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "[\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SUCCEEDED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  },\n  {\n    \"root_task_name\": \"<string>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"state\": \"SKIPPED\",\n    \"scheduled_time\": \"<dateTime>\",\n    \"next_scheduled_time\": \"<dateTime>\",\n    \"root_task_id\": \"<string>\",\n    \"graph_version\": \"<integer>\",\n    \"run_id\": \"<integer>\",\n    \"first_error_task_name\": \"<string>\",\n    \"first_error_code\": \"<integer>\",\n    \"first_error_message\": \"<string>\",\n    \"query_start_time\": \"<dateTime>\",\n    \"completed_time\": \"<dateTime>\"\n  }\n]"
																						},
																						{
																							"name": "Successfully accepted the request, but it is not completed yet.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Accepted",
																							"code": 202,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "Location",
																									"value": "<string>",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																						},
																						{
																							"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Bad Request",
																							"code": 400,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Unauthorized",
																							"code": 401,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Forbidden",
																							"code": 403,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Not Found",
																							"code": 404,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Method Not Allowed",
																							"code": 405,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Too Many Requests",
																							"code": 429,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Internal Server Error",
																							"code": 500,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Service Unavailable",
																							"code": 503,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						},
																						{
																							"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																							"originalRequest": {
																								"method": "GET",
																								"header": [
																									{
																										"key": "Accept",
																										"value": "application/json"
																									},
																									{
																										"key": "Authorization",
																										"value": "Bearer <token>",
																										"description": "Added as a part of security scheme: bearer"
																									}
																								],
																								"url": {
																									"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name/complete-graphs?resultLimit=<integer>&errorOnly=<boolean>",
																									"host": [
																										"{{baseUrl}}"
																									],
																									"path": [
																										"api",
																										"v2",
																										"databases",
																										":database",
																										"schemas",
																										":schema",
																										"tasks",
																										":name",
																										"complete-graphs"
																									],
																									"query": [
																										{
																											"key": "resultLimit",
																											"value": "<integer>",
																											"description": "Number of results to return, at most. Default is 1000, valid range is 1 to 10000."
																										},
																										{
																											"key": "errorOnly",
																											"value": "<boolean>",
																											"description": "Whether to only return results for tasks runs that have failed. Default is false."
																										}
																									],
																									"variable": [
																										{
																											"key": "database"
																										},
																										{
																											"key": "schema"
																										},
																										{
																											"key": "name"
																										}
																									]
																								}
																							},
																							"status": "Gateway Timeout",
																							"code": 504,
																							"_postman_previewlanguage": "json",
																							"header": [
																								{
																									"key": "Content-Type",
																									"value": "application/json"
																								},
																								{
																									"key": "X-Snowflake-Request-ID",
																									"value": "",
																									"description": {
																										"content": "",
																										"type": "text/plain"
																									}
																								}
																							],
																							"cookie": [],
																							"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																						}
																					]
																				}
																			]
																		},
																		{
																			"name": "Fetch a task",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Fetch a task using the describe command output."
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "Link",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"name\": \"S\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"=\\\"\\\"(\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"consequat9d5\": -21478438.297388986,\n    \"sint_3d\": -71669281\n  },\n  \"session_parameters\": {\n    \"dolore__0\": 13354296.975788936,\n    \"cillum_1_\": true\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"task_relations\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -40929188,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"id\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"owner_role_type\": \"<string>\",\n  \"state\": \"started\",\n  \"last_committed_on\": \"<dateTime>\",\n  \"last_suspended_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Create a (or alter an existing) task",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Create a (or alter an existing) task. Even if the operation is just an alter, the full property set must be provided."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Delete a task",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						":name"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Delete a task with the task name. If ifExists is used, the operation will succeed even if the object does not exist. Otherwise, there will be a failure if the drop is unsuccessful."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:execute",
																	"item": [
																		{
																			"name": "Execute a task object.",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						"{{name}}:execute"
																					],
																					"query": [
																						{
																							"key": "asyncExec",
																							"value": "false",
																							"description": "Asynchronous execution enable/disable. Default is disable."
																						},
																						{
																							"key": "retryLast",
																							"value": "false",
																							"description": "Retry the last failed run of the DAG."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Execute a task -- this is equivalent to EXECUTE IMMEDIATE."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:execute?asyncExec=false&retryLast=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:execute"
																							],
																							"query": [
																								{
																									"key": "asyncExec",
																									"value": "false",
																									"description": "Asynchronous execution enable/disable. Default is disable."
																								},
																								{
																									"key": "retryLast",
																									"value": "false",
																									"description": "Retry the last failed run of the DAG."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:resume",
																	"item": [
																		{
																			"name": "Resume a suspended task.",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						"{{name}}:resume"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Resumes a suspended task object. This is equivalento an ALTER TASK ... RESUME."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:resume",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:resume"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:suspend",
																	"item": [
																		{
																			"name": "Suspend a running task.",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks",
																						"{{name}}:suspend"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "ivroF3i",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Suspends a running task. This is equivalent to an ALTER TASK ... SUSPEND."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks/{{name}}:suspend",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tasks",
																								"{{name}}:suspend"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List tasks",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tasks"
																			],
																			"query": [
																				{
																					"key": "rootOnly",
																					"value": "false",
																					"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																				},
																				{
																					"key": "like",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																				},
																				{
																					"key": "startsWith",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																				},
																				{
																					"key": "showLimit",
																					"value": "<integer>",
																					"description": "Query parameter to limit the maximum number of rows returned by a command."
																				},
																				{
																					"key": "fromName",
																					"value": "<string>",
																					"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "ivroF3i",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "ivroF3i",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Lists tasks under the database and schema, with show options as query parameters."
																	},
																	"response": [
																		{
																			"name": "successful",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "Link",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"e\\\"\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"{H\\\"\",\n    \"schedule\": {\n      \"schedule_type\": \"<string>\"\n    },\n    \"comment\": \"<string>\",\n    \"finalize\": \"<string>\",\n    \"task_auto_retry_attempts\": \"<integer>\",\n    \"config\": {\n      \"amet2b\": \"adipisicing cillum laboris\",\n      \"exercitation2\": -86020070.66797736,\n      \"cupidatata0\": \"commodo ut\"\n    },\n    \"session_parameters\": {\n      \"enim_0a_\": -18246886.22637151,\n      \"reprehenderit8d\": -82398813.82555288\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"task_relations\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"target_completion_interval\": {\n      \"minutes\": 5764628,\n      \"schedule_type\": \"<string>\"\n    },\n    \"serverless_task_min_statement_size\": \"<string>\",\n    \"serverless_task_max_statement_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"suspended\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  },\n  {\n    \"name\": \"\\\"\\\"\\\"OFC\\\"\\\"O\\\"\\\"\\\"\",\n    \"definition\": \"<string>\",\n    \"warehouse\": \"\\\"n\\\"\\\"(\\\"\\\"\\\"\\\"\\\"\",\n    \"schedule\": {\n      \"schedule_type\": \"<string>\"\n    },\n    \"comment\": \"<string>\",\n    \"finalize\": \"<string>\",\n    \"task_auto_retry_attempts\": \"<integer>\",\n    \"config\": {\n      \"tempor01\": \"fugiat ad labore\"\n    },\n    \"session_parameters\": {\n      \"consequat_1b8\": 22641003.424419463\n    },\n    \"predecessors\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"task_relations\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"target_completion_interval\": {\n      \"minutes\": 14762848,\n      \"schedule_type\": \"<string>\"\n    },\n    \"serverless_task_min_statement_size\": \"<string>\",\n    \"serverless_task_max_statement_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"condition\": \"<string>\",\n    \"allow_overlapping_execution\": \"<boolean>\",\n    \"error_integration\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"id\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"owner_role_type\": \"<string>\",\n    \"state\": \"started\",\n    \"last_committed_on\": \"<dateTime>\",\n    \"last_suspended_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\"\n  }\n]"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?rootOnly=false&like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "rootOnly",
																							"value": "false",
																							"description": "Query parameter to filter the command output to return only root resources (resources with no predecessors)."
																						},
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Create a task",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tasks"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "ivroF3i",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "ivroF3i",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create a task, with standard create modifiers as query parameters. See the Task component definition for what is required to be provided in the request body."
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"m\",\n  \"definition\": \"<string>\",\n  \"warehouse\": \"\\\"\\\"\\\"\\\"\\\"\\\"\",\n  \"schedule\": {\n    \"schedule_type\": \"<string>\"\n  },\n  \"comment\": \"<string>\",\n  \"finalize\": \"<string>\",\n  \"task_auto_retry_attempts\": \"<integer>\",\n  \"config\": {\n    \"sedcb\": 29217686.49979888,\n    \"consequat_7\": \"incididunt velit ex\"\n  },\n  \"session_parameters\": {\n    \"irure_4\": -7942910\n  },\n  \"predecessors\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"target_completion_interval\": {\n    \"minutes\": -26428644,\n    \"schedule_type\": \"<string>\"\n  },\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"condition\": \"<string>\",\n  \"allow_overlapping_execution\": \"<boolean>\",\n  \"error_integration\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tasks?createMode=errorIfExists",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tasks"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "name",
			"value": "ivroF3i"
		}
	]
}