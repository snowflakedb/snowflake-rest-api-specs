{
	"info": {
		"_postman_id": "133a78b2-baf4-456a-bf68-fb05af312901",
		"name": "Snowflake Table API",
		"description": "The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43111250"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{schema}",
													"item": [
														{
															"name": "tables",
															"item": [
																{
																	"name": "{name}:as_select",
																	"item": [
																		{
																			"name": "Create a table using the result of the specified select query",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:as_select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Create a table as select."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:as_select?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:as_select"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:using_template",
																	"item": [
																		{
																			"name": "Create a table using the templates specified in staged files",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:using_template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Create a table using template."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:using_template?createMode=errorIfExists&copyGrants=false&query=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:using_template"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "query",
																									"value": "<string>",
																									"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}",
																	"item": [
																		{
																			"name": "Fetch a table.",
																			"request": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Fetch a Table using the describe command output."
																			},
																			"response": [
																				{
																					"name": "successful",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "Link",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\",\n  \"created_on\": \"<dateTime>\",\n  \"database_name\": \"<string>\",\n  \"schema_name\": \"<string>\",\n  \"rows\": \"<long>\",\n  \"bytes\": \"<long>\",\n  \"owner\": \"<string>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"automatic_clustering\": \"<boolean>\",\n  \"search_optimization\": \"<boolean>\",\n  \"search_optimization_progress\": \"<long>\",\n  \"search_optimization_bytes\": \"<long>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"table_type\": \"DYNAMIC\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "GET",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Create a (or alter an existing) table.",
																			"request": {
																				"method": "PUT",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						":name"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Create a (or alter an existing) table. Even if the operation is just an alter, the full property set must be provided."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "PUT",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		},
																		{
																			"name": "Delete a table",
																			"request": {
																				"method": "DELETE",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						":name"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						},
																						{
																							"key": "name",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the resource."
																						}
																					]
																				},
																				"description": "Delete a table with the given name."
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "DELETE",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/:name?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								":name"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								},
																								{
																									"key": "name"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:clone",
																	"item": [
																		{
																			"name": "Clone table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:clone"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "targetDatabase",
																							"value": "\"I\"\"\"",
																							"description": "Database of the newly created table. Defaults to the source table's database."
																						},
																						{
																							"key": "targetSchema",
																							"value": "\"I\"\"\"",
																							"description": "Schema of the newly created table. Defaults to the source table's schema."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Create a new table by cloning from the specified resource"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"voluptate aute qui aliquip\",\n    \"reference\": \"in Lorem\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:clone?createMode=errorIfExists&copyGrants=false&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:clone"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the newly created table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the newly created table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:create_like",
																	"item": [
																		{
																			"name": "Create a table like this existing one",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:create_like"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "newTableName",
																							"value": "<string>",
																							"description": "(Required) The name of the table to be created."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Create a new table like the specified resource, but empty"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create_like?createMode=errorIfExists&copyGrants=false&newTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create_like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								},
																								{
																									"key": "newTableName",
																									"value": "<string>",
																									"description": "(Required) The name of the table to be created."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:create-like",
																	"item": [
																		{
																			"name": "Create a table like this existing one",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:create-like"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Create a new table like the specified resource, but empty"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Content-Type",
																								"value": "application/json"
																							},
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"body": {
																							"mode": "raw",
																							"raw": "{\n  \"name\": \"<string>\"\n}",
																							"options": {
																								"raw": {
																									"headerFamily": "json",
																									"language": "json"
																								}
																							}
																						},
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:create-like?createMode=errorIfExists&copyGrants=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:create-like"
																							],
																							"query": [
																								{
																									"key": "createMode",
																									"value": "errorIfExists",
																									"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																								},
																								{
																									"key": "copyGrants",
																									"value": "false",
																									"description": "Query parameter to enable copy grants when creating the object."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:undrop",
																	"item": [
																		{
																			"name": "Undrop a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:undrop"
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Undrop specified table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:undrop",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:undrop"
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:suspend_recluster",
																	"item": [
																		{
																			"name": "Suspend recluster of a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:suspend_recluster"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Suspend recluster of a table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:suspend-recluster",
																	"item": [
																		{
																			"name": "Suspend recluster of a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:suspend-recluster"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Suspend recluster of a table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:suspend-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:suspend-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:resume_recluster",
																	"item": [
																		{
																			"name": "Resume recluster of a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:resume_recluster"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Resume recluster of a table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume_recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume_recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:resume-recluster",
																	"item": [
																		{
																			"name": "Resume recluster of a table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:resume-recluster"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Resume recluster of a table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:resume-recluster?ifExists=false",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:resume-recluster"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:swapwith",
																	"item": [
																		{
																			"name": "Swap with another table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:swapwith"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						},
																						{
																							"key": "targetTableName",
																							"value": "<string>",
																							"description": "(Required) The fully-specified name of the target table to be swapped with."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Swap with another table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swapwith?ifExists=false&targetTableName=<string>",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swapwith"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetTableName",
																									"value": "<string>",
																									"description": "(Required) The fully-specified name of the target table to be swapped with."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "{name}:swap-with",
																	"item": [
																		{
																			"name": "Swap with another table",
																			"request": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables",
																						"{{name}}:swap-with"
																					],
																					"query": [
																						{
																							"key": "ifExists",
																							"value": "false",
																							"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																						},
																						{
																							"key": "targetName",
																							"value": "\"I\"\"\"",
																							"description": "(Required) The name of the target table to be swapped with."
																						},
																						{
																							"key": "targetDatabase",
																							"value": "\"I\"\"\"",
																							"description": "Database of the target table. Defaults to the source table's database."
																						},
																						{
																							"key": "targetSchema",
																							"value": "\"I\"\"\"",
																							"description": "Schema of the target table. Defaults to the source table's schema."
																						}
																					],
																					"variable": [
																						{
																							"key": "database",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																						},
																						{
																							"key": "schema",
																							"value": "\"I\"\"\"",
																							"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																						}
																					]
																				},
																				"description": "Swap with another table"
																			},
																			"response": [
																				{
																					"name": "Successful request.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "OK",
																					"code": 200,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"status\": \"<string>\"\n}"
																				},
																				{
																					"name": "Successfully accepted the request, but it is not completed yet.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Accepted",
																					"code": 202,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "Location",
																							"value": "<string>",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																				},
																				{
																					"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Bad Request",
																					"code": 400,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Unauthorized",
																					"code": 401,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Forbidden",
																					"code": 403,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Not Found",
																					"code": 404,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Method Not Allowed",
																					"code": 405,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Request Timeout",
																					"code": 408,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Conflict",
																					"code": 409,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gone",
																					"code": 410,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Too Many Requests",
																					"code": 429,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Internal Server Error",
																					"code": 500,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Service Unavailable",
																					"code": 503,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				},
																				{
																					"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																					"originalRequest": {
																						"method": "POST",
																						"header": [
																							{
																								"key": "Accept",
																								"value": "application/json"
																							},
																							{
																								"key": "Authorization",
																								"value": "Bearer <token>",
																								"description": "Added as a part of security scheme: bearer"
																							}
																						],
																						"url": {
																							"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables/{{name}}:swap-with?ifExists=false&targetName=\"I\"\"\"&targetDatabase=\"I\"\"\"&targetSchema=\"I\"\"\"",
																							"host": [
																								"{{baseUrl}}"
																							],
																							"path": [
																								"api",
																								"v2",
																								"databases",
																								":database",
																								"schemas",
																								":schema",
																								"tables",
																								"{{name}}:swap-with"
																							],
																							"query": [
																								{
																									"key": "ifExists",
																									"value": "false",
																									"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																								},
																								{
																									"key": "targetName",
																									"value": "\"I\"\"\"",
																									"description": "(Required) The name of the target table to be swapped with."
																								},
																								{
																									"key": "targetDatabase",
																									"value": "\"I\"\"\"",
																									"description": "Database of the target table. Defaults to the source table's database."
																								},
																								{
																									"key": "targetSchema",
																									"value": "\"I\"\"\"",
																									"description": "Schema of the target table. Defaults to the source table's schema."
																								}
																							],
																							"variable": [
																								{
																									"key": "database"
																								},
																								{
																									"key": "schema"
																								}
																							]
																						}
																					},
																					"status": "Gateway Timeout",
																					"code": 504,
																					"_postman_previewlanguage": "json",
																					"header": [
																						{
																							"key": "Content-Type",
																							"value": "application/json"
																						},
																						{
																							"key": "X-Snowflake-Request-ID",
																							"value": "",
																							"description": {
																								"content": "",
																								"type": "text/plain"
																							}
																						}
																					],
																					"cookie": [],
																					"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																				}
																			]
																		}
																	]
																},
																{
																	"name": "List tables",
																	"request": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables"
																			],
																			"query": [
																				{
																					"key": "like",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																				},
																				{
																					"key": "startsWith",
																					"value": "<string>",
																					"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																				},
																				{
																					"key": "showLimit",
																					"value": "<integer>",
																					"description": "Query parameter to limit the maximum number of rows returned by a command."
																				},
																				{
																					"key": "fromName",
																					"value": "<string>",
																					"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																				},
																				{
																					"key": "history",
																					"value": "<boolean>",
																					"description": "Optionally includes dropped tables that have not yet been purged."
																				},
																				{
																					"key": "deep",
																					"value": "<boolean>",
																					"description": "Optionally includes dependency information of the table."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Lists the tables under the database and schema."
																	},
																	"response": [
																		{
																			"name": "successful",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "Link",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "[\n  {\n    \"name\": \"<string>\",\n    \"kind\": \"PERMANENT\",\n    \"cluster_by\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"enable_schema_evolution\": \"<boolean>\",\n    \"change_tracking\": \"<boolean>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"columns\": [\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      }\n    ],\n    \"constraints\": [\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      }\n    ],\n    \"comment\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"rows\": \"<long>\",\n    \"bytes\": \"<long>\",\n    \"owner\": \"<string>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"automatic_clustering\": \"<boolean>\",\n    \"search_optimization\": \"<boolean>\",\n    \"search_optimization_progress\": \"<long>\",\n    \"search_optimization_bytes\": \"<long>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"table_type\": \"HYBRID\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"kind\": \"PERMANENT\",\n    \"cluster_by\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"enable_schema_evolution\": \"<boolean>\",\n    \"change_tracking\": \"<boolean>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"columns\": [\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"datatype\": \"<string>\",\n        \"nullable\": true,\n        \"collate\": \"<string>\",\n        \"default\": \"<string>\",\n        \"autoincrement\": \"<boolean>\",\n        \"autoincrement_start\": \"<integer>\",\n        \"autoincrement_increment\": \"<integer>\",\n        \"constraints\": [\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          },\n          {\n            \"name\": \"<string>\",\n            \"column_names\": [\n              \"<string>\",\n              \"<string>\"\n            ],\n            \"constraint_type\": \"<string>\"\n          }\n        ],\n        \"comment\": \"<string>\"\n      }\n    ],\n    \"constraints\": [\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      },\n      {\n        \"name\": \"<string>\",\n        \"column_names\": [\n          \"<string>\",\n          \"<string>\"\n        ],\n        \"constraint_type\": \"<string>\"\n      }\n    ],\n    \"comment\": \"<string>\",\n    \"created_on\": \"<dateTime>\",\n    \"database_name\": \"<string>\",\n    \"schema_name\": \"<string>\",\n    \"rows\": \"<long>\",\n    \"bytes\": \"<long>\",\n    \"owner\": \"<string>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"automatic_clustering\": \"<boolean>\",\n    \"search_optimization\": \"<boolean>\",\n    \"search_optimization_progress\": \"<long>\",\n    \"search_optimization_bytes\": \"<long>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"table_type\": \"DYNAMIC\"\n  }\n]"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gone",
																			"code": 410,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "GET",
																				"header": [
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=<boolean>&deep=<boolean>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "like",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																						},
																						{
																							"key": "startsWith",
																							"value": "<string>",
																							"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																						},
																						{
																							"key": "showLimit",
																							"value": "<integer>",
																							"description": "Query parameter to limit the maximum number of rows returned by a command."
																						},
																						{
																							"key": "fromName",
																							"value": "<string>",
																							"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																						},
																						{
																							"key": "history",
																							"value": "<boolean>",
																							"description": "Optionally includes dropped tables that have not yet been purged."
																						},
																						{
																							"key": "deep",
																							"value": "<boolean>",
																							"description": "Optionally includes dependency information of the table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																},
																{
																	"name": "Create a table (clone and undrop are separate subresources)",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "copyGrants",
																					"value": "false",
																					"description": "Query parameter to enable copy grants when creating the object."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create a table."
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gone",
																			"code": 410,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"kind\": \"PERMANENT\",\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"enable_schema_evolution\": \"<boolean>\",\n  \"change_tracking\": \"<boolean>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"constraints\": [\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"column_names\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"constraint_type\": \"<string>\"\n    }\n  ],\n  \"comment\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables?createMode=errorIfExists&copyGrants=false",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "tables:as-select",
															"item": [
																{
																	"name": "Create a table using the result of the specified select query",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables:as-select"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "copyGrants",
																					"value": "false",
																					"description": "Query parameter to enable copy grants when creating the object."
																				},
																				{
																					"key": "query",
																					"value": "<string>",
																					"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create a table as select."
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gone",
																			"code": 410,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\",\n  \"columns\": [\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    },\n    {\n      \"name\": \"<string>\",\n      \"datatype\": \"<string>\",\n      \"nullable\": true,\n      \"collate\": \"<string>\",\n      \"default\": \"<string>\",\n      \"autoincrement\": \"<boolean>\",\n      \"autoincrement_start\": \"<integer>\",\n      \"autoincrement_increment\": \"<integer>\",\n      \"constraints\": [\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        },\n        {\n          \"name\": \"<string>\",\n          \"column_names\": [\n            \"<string>\",\n            \"<string>\"\n          ],\n          \"constraint_type\": \"<string>\"\n        }\n      ],\n      \"comment\": \"<string>\"\n    }\n  ],\n  \"cluster_by\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:as-select?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:as-select"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL select query to run to set up the table values (and possibly columns)."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														},
														{
															"name": "tables:using-template",
															"item": [
																{
																	"name": "Create a table using the templates specified in staged files",
																	"request": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"<string>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":schema",
																				"tables:using-template"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "copyGrants",
																					"value": "false",
																					"description": "Query parameter to enable copy grants when creating the object."
																				},
																				{
																					"key": "query",
																					"value": "<string>",
																					"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																				}
																			],
																			"variable": [
																				{
																					"key": "database",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																				},
																				{
																					"key": "schema",
																					"value": "\"I\"\"\"",
																					"description": "(Required) Identifier (i.e. name) for the schema to which the resource belongs. You can use the `/api/v2/databases/{database}/schemas` GET request to get a list of available schemas for the specified database."
																				}
																			]
																		},
																		"description": "Create a table using template."
																	},
																	"response": [
																		{
																			"name": "Successful request.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "OK",
																			"code": 200,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"status\": \"<string>\"\n}"
																		},
																		{
																			"name": "Successfully accepted the request, but it is not completed yet.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Accepted",
																			"code": 202,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "Location",
																					"value": "<string>",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																		},
																		{
																			"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Bad Request",
																			"code": 400,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Unauthorized",
																			"code": 401,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Forbidden",
																			"code": 403,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Not Found",
																			"code": 404,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Method Not Allowed",
																			"code": 405,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Request Timeout",
																			"code": 408,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Conflict",
																			"code": 409,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gone",
																			"code": 410,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Too Many Requests",
																			"code": 429,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Internal Server Error",
																			"code": 500,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Service Unavailable",
																			"code": 503,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		},
																		{
																			"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																			"originalRequest": {
																				"method": "POST",
																				"header": [
																					{
																						"key": "Content-Type",
																						"value": "application/json"
																					},
																					{
																						"key": "Accept",
																						"value": "application/json"
																					},
																					{
																						"key": "Authorization",
																						"value": "Bearer <token>",
																						"description": "Added as a part of security scheme: bearer"
																					}
																				],
																				"body": {
																					"mode": "raw",
																					"raw": "{\n  \"name\": \"<string>\"\n}",
																					"options": {
																						"raw": {
																							"headerFamily": "json",
																							"language": "json"
																						}
																					}
																				},
																				"url": {
																					"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:schema/tables:using-template?createMode=errorIfExists&copyGrants=false&query=<string>",
																					"host": [
																						"{{baseUrl}}"
																					],
																					"path": [
																						"api",
																						"v2",
																						"databases",
																						":database",
																						"schemas",
																						":schema",
																						"tables:using-template"
																					],
																					"query": [
																						{
																							"key": "createMode",
																							"value": "errorIfExists",
																							"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																						},
																						{
																							"key": "copyGrants",
																							"value": "false",
																							"description": "Query parameter to enable copy grants when creating the object."
																						},
																						{
																							"key": "query",
																							"value": "<string>",
																							"description": "(Required) The SQL query that uses INFER_SCHEMA on staged files to set the column definitions for the new table."
																						}
																					],
																					"variable": [
																						{
																							"key": "database"
																						},
																						{
																							"key": "schema"
																						}
																					]
																				}
																			},
																			"status": "Gateway Timeout",
																			"code": 504,
																			"_postman_previewlanguage": "json",
																			"header": [
																				{
																					"key": "Content-Type",
																					"value": "application/json"
																				},
																				{
																					"key": "X-Snowflake-Request-ID",
																					"value": "",
																					"description": {
																						"content": "",
																						"type": "text/plain"
																					}
																				}
																			],
																			"cookie": [],
																			"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																		}
																	]
																}
															]
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "name",
			"value": "\"I\"\"\""
		}
	]
}