{
	"info": {
		"_postman_id": "e5d83016-fd38-4054-a162-cd10fffd015a",
		"name": "Snowflake Schema API",
		"description": "The Snowflake Schema API is a REST API that you can use to access, update, and perform certain actions on a Snowflake schema.\n\nContact Support:\n Name: Snowflake, Inc.\n Email: support@snowflake.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43111250"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v2",
					"item": [
						{
							"name": "databases",
							"item": [
								{
									"name": "{database}",
									"item": [
										{
											"name": "schemas",
											"item": [
												{
													"name": "{name}:clone",
													"item": [
														{
															"name": "Clone a schema.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		"{{name}}:clone"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		},
																		{
																			"key": "targetDatabase",
																			"value": "fjO",
																			"description": "Database of the newly created schema. Defaults to the source schema's database."
																		}
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																		}
																	]
																},
																"description": "Clones an existing schema, with modifiers as query parameters. You must provide the full schema definition when cloning an existing schema."
															},
															"response": [
																{
																	"name": "Successful request.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"status\": \"<string>\"\n}"
																},
																{
																	"name": "Successfully accepted the request, but it is not completed yet.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Accepted",
																	"code": 202,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "Location",
																			"value": "<string>",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Request Timeout",
																	"code": 408,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Conflict",
																	"code": 409,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Gone",
																	"code": 410,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Too Many Requests",
																	"code": 429,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"ihy\",\n  \"point_of_time\": {\n    \"point_of_time_type\": \"consequat nisi\",\n    \"reference\": \"irure\"\n  },\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:clone?createMode=errorIfExists&kind=&targetDatabase=fjO",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:clone"
																			],
																			"query": [
																				{
																					"key": "createMode",
																					"value": "errorIfExists",
																					"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																				},
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to clone. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				},
																				{
																					"key": "targetDatabase",
																					"value": "fjO",
																					"description": "Database of the newly created schema. Defaults to the source schema's database."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "{name}:undrop",
													"item": [
														{
															"name": "Undrop a schema.",
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		"{{name}}:undrop"
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																		}
																	]
																},
																"description": "Undrops schema."
															},
															"response": [
																{
																	"name": "Successful request.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"status\": \"<string>\"\n}"
																},
																{
																	"name": "Successfully accepted the request, but it is not completed yet.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Accepted",
																	"code": 202,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "Location",
																			"value": "<string>",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Request Timeout",
																	"code": 408,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Conflict",
																	"code": 409,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Gone",
																	"code": 410,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Too Many Requests",
																	"code": 429,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/{{name}}:undrop",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				"{{name}}:undrop"
																			],
																			"variable": [
																				{
																					"key": "database"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "{name}",
													"item": [
														{
															"name": "fetch Schema",
															"request": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		":name"
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																		},
																		{
																			"key": "name",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the resource."
																		}
																	]
																},
																"description": "Fetches a schema."
															},
															"response": [
																{
																	"name": "successful",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		},
																		{
																			"key": "Link",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"name\": \"\\\"vA\\\"\\\"T\\\"\\\"\\\"\\\"!*D\\\"\\\"\\\"\",\n  \"created_on\": \"<dateTime>\",\n  \"kind\": \"PERMANENT\",\n  \"is_default\": \"<boolean>\",\n  \"is_current\": \"<boolean>\",\n  \"database_name\": \"<string>\",\n  \"owner\": \"<string>\",\n  \"comment\": \"<string>\",\n  \"options\": \"<string>\",\n  \"managed_access\": false,\n  \"retention_time\": \"<integer>\",\n  \"dropped_on\": \"<dateTime>\",\n  \"owner_role_type\": \"<string>\",\n  \"budget\": \"<string>\",\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}"
																},
																{
																	"name": "Successfully accepted the request, but it is not completed yet.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Accepted",
																	"code": 202,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "Location",
																			"value": "<string>",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Request Timeout",
																	"code": 408,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Conflict",
																	"code": 409,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gone",
																	"code": 410,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Too Many Requests",
																	"code": 429,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "GET",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														},
														{
															"name": "Create a new, or alters an existing, schema.",
															"request": {
																"method": "PUT",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		":name"
																	],
																	"query": [
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																		},
																		{
																			"key": "name",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the resource."
																		}
																	]
																},
																"description": "Creates a new, or alters an existing, schema. You must provide the full schema definition even when altering an existing schema."
															},
															"response": [
																{
																	"name": "Successful request.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"status\": \"<string>\"\n}"
																},
																{
																	"name": "Successfully accepted the request, but it is not completed yet.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Accepted",
																	"code": 202,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "Location",
																			"value": "<string>",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Request Timeout",
																	"code": 408,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Conflict",
																	"code": 409,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gone",
																	"code": 410,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Too Many Requests",
																	"code": 429,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "PUT",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "application/json"
																			},
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"body": {
																			"mode": "raw",
																			"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																			"options": {
																				"raw": {
																					"headerFamily": "json",
																					"language": "json"
																				}
																			}
																		},
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?kind=",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "kind",
																					"value": "",
																					"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														},
														{
															"name": "Delete a schema.",
															"request": {
																"method": "DELETE",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas",
																		":name"
																	],
																	"query": [
																		{
																			"key": "ifExists",
																			"value": "false",
																			"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																		},
																		{
																			"key": "restrict",
																			"value": "false",
																			"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																		},
																		{
																			"key": "name",
																			"value": "fjO",
																			"description": "(Required) Identifier (i.e. name) for the resource."
																		}
																	]
																},
																"description": "Deletes the specified schema. If you enable the `ifExists` parameter, the operation succeeds even if the schema does not exist. Otherwise, a 404 failure is returned if the schema does not exist. if the drop is unsuccessful."
															},
															"response": [
																{
																	"name": "Successful request.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "OK",
																	"code": 200,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"status\": \"<string>\"\n}"
																},
																{
																	"name": "Successfully accepted the request, but it is not completed yet.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Accepted",
																	"code": 202,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "Location",
																			"value": "<string>",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
																},
																{
																	"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Bad Request",
																	"code": 400,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Unauthorized",
																	"code": 401,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Forbidden",
																	"code": 403,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Not Found",
																	"code": 404,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Request Timeout",
																	"code": 408,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Conflict",
																	"code": 409,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gone",
																	"code": 410,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Too Many Requests",
																	"code": 429,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Internal Server Error",
																	"code": 500,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Service Unavailable",
																	"code": 503,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																},
																{
																	"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
																	"originalRequest": {
																		"method": "DELETE",
																		"header": [
																			{
																				"key": "Accept",
																				"value": "application/json"
																			},
																			{
																				"key": "Authorization",
																				"value": "Bearer <token>",
																				"description": "Added as a part of security scheme: bearer"
																			}
																		],
																		"url": {
																			"raw": "{{baseUrl}}/api/v2/databases/:database/schemas/:name?ifExists=false&restrict=false",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"api",
																				"v2",
																				"databases",
																				":database",
																				"schemas",
																				":name"
																			],
																			"query": [
																				{
																					"key": "ifExists",
																					"value": "false",
																					"description": "Query parameter that specifies how to handle the request for a resource that does not exist:\n- `true`: The endpoint does not throw an error if the resource does not exist. It returns a 200 success response, but does not take any action on the resource.\n- `false`: The endpoint throws an error if the resource doesn't exist."
																				},
																				{
																					"key": "restrict",
																					"value": "false",
																					"description": "Whether to drop the schema if foreign keys exist that reference any tables in the schema.\n- `true`: Return a warning about existing foreign key references and don't drop the schema.\n- `false`: Drop the schema and all objects in the database, including tables with primary or unique keys that are referenced by foreign keys in other tables.\nDefault: `false`."
																				}
																			],
																			"variable": [
																				{
																					"key": "database"
																				},
																				{
																					"key": "name"
																				}
																			]
																		}
																	},
																	"status": "Gateway Timeout",
																	"code": 504,
																	"_postman_previewlanguage": "json",
																	"header": [
																		{
																			"key": "Content-Type",
																			"value": "application/json"
																		},
																		{
																			"key": "X-Snowflake-Request-ID",
																			"value": "",
																			"description": {
																				"content": "",
																				"type": "text/plain"
																			}
																		}
																	],
																	"cookie": [],
																	"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
																}
															]
														}
													]
												},
												{
													"name": "List schemas.",
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":database",
																"schemas"
															],
															"query": [
																{
																	"key": "like",
																	"value": "<string>",
																	"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																},
																{
																	"key": "startsWith",
																	"value": "<string>",
																	"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																},
																{
																	"key": "showLimit",
																	"value": "<integer>",
																	"description": "Query parameter to limit the maximum number of rows returned by a command."
																},
																{
																	"key": "fromName",
																	"value": "<string>",
																	"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																},
																{
																	"key": "history",
																	"value": "false",
																	"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																}
															],
															"variable": [
																{
																	"key": "database",
																	"value": "fjO",
																	"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																}
															]
														},
														"description": "Lists the accessible schemas."
													},
													"response": [
														{
															"name": "Successful request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																},
																{
																	"key": "Link",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "[\n  {\n    \"name\": \"png_p\",\n    \"created_on\": \"<dateTime>\",\n    \"kind\": \"PERMANENT\",\n    \"is_default\": \"<boolean>\",\n    \"is_current\": \"<boolean>\",\n    \"database_name\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"comment\": \"<string>\",\n    \"options\": \"<string>\",\n    \"managed_access\": false,\n    \"retention_time\": \"<integer>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"log_level\": \"<string>\",\n    \"pipe_execution_paused\": \"<boolean>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"trace_level\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"serverless_task_min_statement_size\": \"<string>\",\n    \"serverless_task_max_statement_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\"\n  },\n  {\n    \"name\": \"\\\"\\\"\\\"\\\"\\\"\\\"\\\"$\\\"\\\"6\\\"\",\n    \"created_on\": \"<dateTime>\",\n    \"kind\": \"PERMANENT\",\n    \"is_default\": \"<boolean>\",\n    \"is_current\": \"<boolean>\",\n    \"database_name\": \"<string>\",\n    \"owner\": \"<string>\",\n    \"comment\": \"<string>\",\n    \"options\": \"<string>\",\n    \"managed_access\": false,\n    \"retention_time\": \"<integer>\",\n    \"dropped_on\": \"<dateTime>\",\n    \"owner_role_type\": \"<string>\",\n    \"budget\": \"<string>\",\n    \"data_retention_time_in_days\": \"<integer>\",\n    \"default_ddl_collation\": \"<string>\",\n    \"log_level\": \"<string>\",\n    \"pipe_execution_paused\": \"<boolean>\",\n    \"max_data_extension_time_in_days\": \"<integer>\",\n    \"suspend_task_after_num_failures\": \"<integer>\",\n    \"trace_level\": \"<string>\",\n    \"user_task_managed_initial_warehouse_size\": \"<string>\",\n    \"serverless_task_min_statement_size\": \"<string>\",\n    \"serverless_task_max_statement_size\": \"<string>\",\n    \"user_task_timeout_ms\": \"<integer>\"\n  }\n]"
														},
														{
															"name": "Successfully accepted the request, but it is not completed yet.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "Location",
																	"value": "<string>",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Request Timeout",
															"code": 408,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Too Many Requests",
															"code": 429,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?like=<string>&startsWith=<string>&showLimit=<integer>&fromName=<string>&history=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "like",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output by resource name. Uses case-insensitive pattern matching, with support for SQL wildcard characters."
																		},
																		{
																			"key": "startsWith",
																			"value": "<string>",
																			"description": "Query parameter to filter the command output based on the string of characters that appear at the beginning of the object name. Uses case-sensitive pattern matching."
																		},
																		{
																			"key": "showLimit",
																			"value": "<integer>",
																			"description": "Query parameter to limit the maximum number of rows returned by a command."
																		},
																		{
																			"key": "fromName",
																			"value": "<string>",
																			"description": "Query parameter to enable fetching rows only following the first row whose object name matches the specified string. Case-sensitive and does not have to be the full name."
																		},
																		{
																			"key": "history",
																			"value": "false",
																			"description": "Whether to include dropped schemas that have not yet been purged. Default: `false`."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												},
												{
													"name": "Create a schema.",
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v2",
																"databases",
																":database",
																"schemas"
															],
															"query": [
																{
																	"key": "createMode",
																	"value": "errorIfExists",
																	"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																},
																{
																	"key": "kind",
																	"value": "",
																	"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																}
															],
															"variable": [
																{
																	"key": "database",
																	"value": "fjO",
																	"description": "(Required) Identifier (i.e. name) for the database to which the resource belongs. You can use the `/api/v2/databases` GET request to get a list of available databases."
																}
															]
														},
														"description": "Creates a schema, with modifiers as query parameters. You must provide the full schema definition when creating a schema."
													},
													"response": [
														{
															"name": "Successful request.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"status\": \"<string>\"\n}"
														},
														{
															"name": "Successfully accepted the request, but it is not completed yet.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "Location",
																	"value": "<string>",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"code\": \"<string>\",\n  \"message\": \"<string>\",\n  \"resultHandler\": \"<string>\"\n}"
														},
														{
															"name": "Bad Request. The request payload is invalid or malformed. This happens if the application didn't send the correct request payload. The response body may include the error code and message indicating the actual cause. The application must reconstruct the r",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Unauthorized. The request is not authorized. This happens if the attached access token is invalid or missing. The response body may include the error code and message indicating the actual cause, e.g., expired, invalid token. The application must obtain a",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Forbidden. The request is forbidden. This can also happen if the request is made even if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Not Found. The request endpoint is not valid. This happens if the API endpoint does not exist, or if the API is not enabled.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Method Not Allowed. The request method doesn't match the supported API. This happens, for example, if the application calls the API with GET method but the endpoint accepts only POST.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Request Timeout. This indicates that the request from the client timed out and was not completed by the server.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Request Timeout",
															"code": 408,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Conflict. The requested operation could not be performed due to a conflicting state that could not be resolved. This usually happens when a CREATE request was performed when there is a pre-existing resource with the same name, and also without one of the ",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Conflict",
															"code": 409,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gone. This error is primarily intended to assist the task of web maintenance by notifying the recipient that the resource is intentionally unavailable.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Gone",
															"code": 410,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Limit Exceeded. The number of requests hit the rate limit. The application must slow down the frequency of hitting the API endpoints.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Too Many Requests",
															"code": 429,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Internal Server Error. The server hit an unrecoverable system error. The response body may include the error code and message for further guidance. The application owner may need to reach out the customer support.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Service Unavailable. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Service Unavailable",
															"code": 503,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														},
														{
															"name": "Gateway Timeout. The request was not processed due to server side timeouts. The application may retry with backoff. The jittered backoff is recommended.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"key": "Authorization",
																		"value": "Bearer <token>",
																		"description": "Added as a part of security scheme: bearer"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"name\": \"G3IzT1$\",\n  \"kind\": \"PERMANENT\",\n  \"comment\": \"<string>\",\n  \"managed_access\": false,\n  \"data_retention_time_in_days\": \"<integer>\",\n  \"default_ddl_collation\": \"<string>\",\n  \"log_level\": \"<string>\",\n  \"pipe_execution_paused\": \"<boolean>\",\n  \"max_data_extension_time_in_days\": \"<integer>\",\n  \"suspend_task_after_num_failures\": \"<integer>\",\n  \"trace_level\": \"<string>\",\n  \"user_task_managed_initial_warehouse_size\": \"<string>\",\n  \"serverless_task_min_statement_size\": \"<string>\",\n  \"serverless_task_max_statement_size\": \"<string>\",\n  \"user_task_timeout_ms\": \"<integer>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v2/databases/:database/schemas?createMode=errorIfExists&kind=",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v2",
																		"databases",
																		":database",
																		"schemas"
																	],
																	"query": [
																		{
																			"key": "createMode",
																			"value": "errorIfExists",
																			"description": "Query parameter allowing support for different modes of resource creation. Possible values include:\n- `errorIfExists`: Throws an error if you try to create a resource that already exists.\n- `orReplace`: Automatically replaces the existing resource with the current one.\n- `ifNotExists`: Creates a new resource when an alter is requested for a non-existent resource."
																		},
																		{
																			"key": "kind",
																			"value": "",
																			"description": "Type of schema to create. Currently, Snowflake supports only `transient` and `permanent` (also represented by the empty string)."
																		}
																	],
																	"variable": [
																		{
																			"key": "database"
																		}
																	]
																}
															},
															"status": "Gateway Timeout",
															"code": 504,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																},
																{
																	"key": "X-Snowflake-Request-ID",
																	"value": "",
																	"description": {
																		"content": "",
																		"type": "text/plain"
																	}
																}
															],
															"cookie": [],
															"body": "{\n  \"message\": \"<string>\",\n  \"code\": \"<string>\",\n  \"error_code\": \"<string>\",\n  \"request_id\": \"<string>\"\n}"
														}
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://org-account.snowflakecomputing.com"
		},
		{
			"key": "name",
			"value": "fjO"
		}
	]
}